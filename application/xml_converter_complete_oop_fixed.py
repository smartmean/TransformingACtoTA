"""
Complete OOP UPPAAL Converter Application - Fixed Version
‡πÉ‡∏ä‡πâ infrastructure components ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏° Clean Architecture principles
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 6.fork_join_2fork3_Res.xml
"""
from typing import Dict, Any, List
from domain.interfaces import IConverter
from domain.models import ConversionContext, NodeInfo, EdgeInfo, Template

# Import infrastructure components - Complete OOP Architecture
from infrastructure.xml_parser import ActivityDiagramParser
from infrastructure.location_builder import LocationBuilder
from infrastructure.transition_builder import TransitionBuilder
from infrastructure.template_manager import TemplateManager
from infrastructure.declaration_manager import DeclarationManager
from infrastructure.xml_generator import XMLGenerator
from infrastructure.node_processors import NodeProcessorFactory


class CompleteOOPConverterFixed(IConverter):
    """
    Complete OOP Converter ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° Clean Architecture ‡πÅ‡∏•‡∏∞ SOLID principles
    """
    
    def __init__(self):
        """Initialize all infrastructure components with proper dependency injection"""
        # Working context - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ dependency injection
        self.context = ConversionContext()
        
        # Infrastructure Layer Components - ‡∏ï‡∏≤‡∏° Dependency Injection pattern
        self.declaration_manager = DeclarationManager()
        self.template_manager = TemplateManager(self.context)
        self.xml_parser = ActivityDiagramParser()
        self.location_builder = LocationBuilder(self.context, self.declaration_manager)
        self.transition_builder = TransitionBuilder()
        self.xml_generator = XMLGenerator()
        self.node_processor_factory = NodeProcessorFactory(self.context)
    
    def convert(self, activity_xml: str) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á Activity Diagram XML ‡πÄ‡∏õ‡πá‡∏ô UPPAAL XML ‡∏î‡πâ‡∏ß‡∏¢ Complete OOP Architecture"""
        try:
            # 1. Parse XML ‡∏î‡πâ‡∏ß‡∏¢ Infrastructure Parser
            print("üîç Parsing XML with ActivityDiagramParser...")
            nodes, edges = self.xml_parser.parse_activity_diagram(activity_xml)
            
            # Update context
            self.context.nodes = {node.node_id: node for node in nodes}
            self.context.edges = edges
            
            print(f"üìä Parsed {len(nodes)} nodes and {len(edges)} edges")
            
            # 2. Process nodes ‡∏î‡πâ‡∏ß‡∏¢ Node Processor Factory (Strategy Pattern)
            print("‚öôÔ∏è Processing nodes with NodeProcessorFactory...")
            self._process_nodes_with_strategy_pattern(nodes)
            
            # 3. Create main template ‡∏î‡πâ‡∏ß‡∏¢ Template Manager
            print("üèóÔ∏è Creating main template with TemplateManager...")
            main_template = self.template_manager.create_template("Template")
            
            # 4. Build locations ‡∏î‡πâ‡∏ß‡∏¢ Location Builder  
            print("üìç Building locations with LocationBuilder...")
            self._build_main_template_locations(main_template, nodes)
            
            # 5. Create fork templates ‡∏ï‡∏≤‡∏° OOP pattern ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            print("üîÄ Creating fork templates...")
            fork_templates = self._create_fork_templates_oop()
            
            # 6. Build transitions ‡∏î‡πâ‡∏ß‡∏¢ Transition Builder
            print("üîó Building transitions with TransitionBuilder...")
            all_templates = [main_template] + fork_templates
            self._build_all_transitions(all_templates)
            
            # 7. Generate final XML ‡∏î‡πâ‡∏ß‡∏¢ XML Generator
            print("üìÑ Generating XML with XMLGenerator...")
            declarations = self.declaration_manager.get_declarations()
            final_xml = self.xml_generator.generate_xml(all_templates, declarations)
            
            print("‚úÖ Complete OOP conversion completed successfully!")
            return final_xml
            
        except Exception as e:
            raise ValueError(f"Complete OOP Conversion failed: {str(e)}")
    
    def _process_nodes_with_strategy_pattern(self, nodes: List[NodeInfo]):
        """Process nodes ‡∏î‡πâ‡∏ß‡∏¢ Strategy Pattern"""
        for node in nodes:
            processor = self.node_processor_factory.get_processor(node.node_type)
            if processor:
                result = processor.process_node(
                    node_id=node.node_id,
                    node_name=node.name,
                    node_type=node.node_type,
                    context={'x_offset': 100}
                )
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° declarations ‡∏à‡∏≤‡∏Å processed result
                if 'declarations' in result:
                    for decl in result['declarations']:
                        self.declaration_manager.add_declaration(decl)
    
    def _build_main_template_locations(self, main_template: Template, nodes: List[NodeInfo]):
        """Build locations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main template - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP"""
        # ‡πÉ‡∏ä‡πâ OOP approach: ‡∏™‡∏£‡πâ‡∏≤‡∏á main path ‡πÄ‡∏õ‡πá‡∏ô ordered sequence
        main_path_sequence = self._build_main_path_sequence(nodes)
        
        # ‡πÉ‡∏ä‡πâ LocationBuilder (OOP component) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° locations
        for node_id in main_path_sequence:
            node = self.context.nodes.get(node_id)
            if node:
                self.location_builder.add_location(
                    template=main_template,
                    location_id=node.node_id,
                    node_name=node.name,
                    node_type=node.node_type
                )
    
    def _build_main_path_sequence(self, nodes: List[NodeInfo]) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á main path sequence ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP - Dynamic Detection (‡πÑ‡∏°‡πà hardcode)"""
        main_path = []
        
        # Step 1: ‡∏´‡∏≤ InitialNode (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) - dynamic detection
        for node in nodes:
            if node.node_type in ("uml:InitialNode", "InitialNode"):
                main_path.append(node.node_id)
                break
        
        # Step 2: ‡∏´‡∏≤ first process action - dynamic detection
        for node in nodes:
            if ("Process" in node.name and node.node_type in ("uml:OpaqueAction", "OpaqueAction") and 
                self._is_main_process(node.name)):
                main_path.append(node.node_id)
                break
        
        # Step 3: ‡∏´‡∏≤ main ForkNode - dynamic detection
        main_fork = self._detect_main_fork_node()
        if main_fork:
            main_path.append(main_fork)
        
        # Step 4: ‡∏´‡∏≤ main JoinNode - dynamic detection
        main_join = self._detect_main_join_node()
        if main_join:
            main_path.append(main_join)
        
        # Step 5: ‡∏´‡∏≤ ActivityFinalNode (‡∏à‡∏ö) - dynamic detection
        for node in nodes:
            if node.node_type in ("uml:ActivityFinalNode", "ActivityFinalNode"):
                main_path.append(node.node_id)
                break
        
        return main_path
    
    def _is_main_process(self, process_name: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô main process ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - dynamic detection"""
        # ‡∏´‡∏≤ process ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
        process_numbers = []
        for node_id, node in self.context.nodes.items():
            if "Process" in node.name and node.node_type in ("uml:OpaqueAction", "OpaqueAction"):
                # Extract number from process name
                import re
                numbers = re.findall(r'\d+', node.name)
                if numbers:
                    process_numbers.append((int(numbers[0]), node.name))
        
        if process_numbers:
            process_numbers.sort()
            main_process_name = process_numbers[0][1]
            return process_name == main_process_name
        
        return False
    
    def _detect_main_fork_node(self) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ main fork node - dynamic detection"""
        fork_candidates = []
        for node_id, node in self.context.nodes.items():
            if node.node_type in ("uml:ForkNode", "ForkNode"):
                # ‡∏ô‡∏±‡∏ö underscore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π level ‡∏Ç‡∏≠‡∏á fork
                underscore_count = node.name.count('_')
                fork_candidates.append((underscore_count, node.node_id, node.name))
        
        if fork_candidates:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fork ‡∏ó‡∏µ‡πà‡∏°‡∏µ underscore ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (main level)
            fork_candidates.sort()
            return fork_candidates[0][1]
        
        return None
    
    def _detect_main_join_node(self) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ main join node - dynamic detection"""
        join_candidates = []
        for node_id, node in self.context.nodes.items():
            if node.node_type in ("uml:JoinNode", "JoinNode"):
                # ‡∏ô‡∏±‡∏ö underscore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π level ‡∏Ç‡∏≠‡∏á join
                underscore_count = node.name.count('_')
                join_candidates.append((underscore_count, node.node_id, node.name))
        
        if join_candidates:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å join ‡∏ó‡∏µ‡πà‡∏°‡∏µ underscore ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (main level)
            join_candidates.sort()
            return join_candidates[0][1]
        
        return None
    
    def _create_fork_templates_oop(self) -> List[Template]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á fork templates ‡∏î‡πâ‡∏ß‡∏¢ OOP approach ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - Dynamic Detection"""
        fork_templates = []
        
        # ‡∏´‡∏≤ main fork node - dynamic detection
        main_fork_node = self._get_main_fork_node_dynamic()
        
        if not main_fork_node:
            return fork_templates
        
        # ‡∏´‡∏≤ outgoing edges ‡∏à‡∏≤‡∏Å main fork - dynamic detection
        outgoing_edges = [e for e in self.context.edges if e.source_id == main_fork_node.node_id]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á templates ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô outgoing edges - dynamic
        for i, edge in enumerate(outgoing_edges):
            template_name = self._generate_template_name(i+1)
            fork_template = self.template_manager.create_template(template_name)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° initial location ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fork template
            self.location_builder.add_location(
                template=fork_template,
                location_id=f"fork_{template_name}",
                node_name=f"InitialNode_{template_name}",
                node_type="InitialNode"
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà target node ‡∏Ç‡∏≠‡∏á edge - dynamic detection
            self._add_specific_path_to_fork_template(fork_template, edge.target_id, template_name)
            
            fork_templates.append(fork_template)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á nested fork templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ó‡∏µ‡πà‡∏°‡∏µ nested forks - dynamic
        nested_templates = self._create_nested_templates_dynamic(fork_templates)
        fork_templates.extend(nested_templates)
        
        return fork_templates
    
    def _get_main_fork_node_dynamic(self):
        """‡∏´‡∏≤ main fork node - dynamic detection"""
        for node_id, node in self.context.nodes.items():
            if (node.node_type in ("uml:ForkNode", "ForkNode") and 
                self._is_main_level_fork(node.name)):
                return node
        return None
    
    def _is_main_level_fork(self, fork_name: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô main level fork ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - dynamic detection"""
        # ‡∏ô‡∏±‡∏ö underscore ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ underscore ‡∏ô‡πâ‡∏≠‡∏¢ = main level
        underscore_count = fork_name.count('_')
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö fork nodes ‡∏≠‡∏∑‡πà‡∏ô
        all_fork_underscores = []
        for node_id, node in self.context.nodes.items():
            if node.node_type in ("uml:ForkNode", "ForkNode"):
                all_fork_underscores.append(node.name.count('_'))
        
        if all_fork_underscores:
            min_underscores = min(all_fork_underscores)
            return underscore_count == min_underscores
        
        return True
    
    def _generate_template_name(self, template_number: int) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ template - dynamic pattern"""
        base_name = self._detect_template_naming_pattern()
        return f"{base_name}{template_number}"
    
    def _detect_template_naming_pattern(self) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ template - dynamic detection"""
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏à‡∏≤‡∏Å existing templates ‡∏´‡∏£‡∏∑‡∏≠ conventions
        # Default pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        return "Template"
    
    def _create_nested_templates_dynamic(self, parent_templates: List[Template]) -> List[Template]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á nested templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö templates ‡∏ó‡∏µ‡πà‡∏°‡∏µ nested forks - dynamic detection"""
        nested_templates = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ template ‡∏ó‡∏µ‡πà‡∏°‡∏µ nested forks
        for template in parent_templates:
            nested_fork_nodes = self._find_nested_forks_in_template(template)
            
            for nested_fork in nested_fork_nodes:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á nested templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fork ‡∏ô‡∏µ‡πâ
                fork_nested_templates = self._create_templates_for_nested_fork(template, nested_fork)
                nested_templates.extend(fork_nested_templates)
        
        return nested_templates
    
    def _find_nested_forks_in_template(self, template: Template) -> List:
        """‡∏´‡∏≤ nested fork nodes ‡πÉ‡∏ô template - dynamic detection"""
        nested_forks = []
        for location_id in template.locations.keys():
            node = self.context.nodes.get(location_id)
            if node and node.node_type in ("uml:ForkNode", "ForkNode"):
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô nested fork (‡∏°‡∏µ underscore ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ main)
                if not self._is_main_level_fork(node.name):
                    nested_forks.append(node)
        return nested_forks
    
    def _create_templates_for_nested_fork(self, parent_template: Template, nested_fork_node) -> List[Template]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested fork - dynamic detection"""
        nested_templates = []
        
        # ‡∏´‡∏≤ outgoing edges ‡∏à‡∏≤‡∏Å nested fork
        outgoing_edges = [e for e in self.context.edges if e.source_id == nested_fork_node.node_id]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ edge
        for i, edge in enumerate(outgoing_edges):
            template_name = f"{parent_template.name}_{i+1}"
            nested_template = self.template_manager.create_template(template_name)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° initial location
            self.location_builder.add_location(
                template=nested_template,
                location_id=f"fork_{template_name}",
                node_name=f"InitialNode_{template_name}",
                node_type="InitialNode"
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested template
            self._add_nested_template_path(nested_template, edge.target_id, template_name)
            
            nested_templates.append(nested_template)
        
        return nested_templates
    
    def _add_specific_path_to_fork_template(self, template: Template, start_node_id: str, template_name: str):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fork template ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô - Dynamic Detection"""
        start_node = self.context.nodes.get(start_node_id)
        if not start_node:
            return
            
        template_edges = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö template type ‡πÅ‡∏•‡∏∞ process type - dynamic detection
        template_type = self._determine_template_type(template_name, start_node)
        
        if template_type == "nested_fork_template":
            # Template ‡∏ó‡∏µ‡πà‡∏°‡∏µ nested fork (‡πÄ‡∏ä‡πà‡∏ô Template1)
            self._add_nested_fork_template_path(template, start_node, template_edges)
        elif template_type == "simple_template":
            # Template ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ nested fork (‡πÄ‡∏ä‡πà‡∏ô Template2)
            self._add_simple_template_path(template, start_node, template_edges)
        
        # ‡πÄ‡∏Å‡πá‡∏ö edges ‡∏Ç‡∏≠‡∏á template ‡∏ô‡∏µ‡πâ
        if not hasattr(template, '_template_edges'):
            template._template_edges = []
        template._template_edges.extend(template_edges)
    
    def _determine_template_type(self, template_name: str, start_node) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö template type - dynamic detection"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ process node ‡∏ô‡∏µ‡πâ‡∏°‡∏µ path ‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á nested fork ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self._has_path_to_nested_fork(start_node.node_id):
            return "nested_fork_template"
        else:
            return "simple_template"
    
    def _has_path_to_nested_fork(self, start_node_id: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ node ‡∏ô‡∏µ‡πâ‡∏°‡∏µ path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á nested fork ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        visited = set()
        to_visit = [start_node_id]
        
        while to_visit:
            current = to_visit.pop(0)
            if current in visited:
                continue
            visited.add(current)
            
            current_node = self.context.nodes.get(current)
            if current_node and current_node.node_type in ("uml:ForkNode", "ForkNode"):
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô nested fork ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if not self._is_main_level_fork(current_node.name):
                    return True
            
            # ‡∏´‡∏≤ next nodes
            for edge in self.context.edges:
                if edge.source_id == current:
                    to_visit.append(edge.target_id)
        
        return False
    
    def _add_nested_fork_template_path(self, template: Template, start_node, template_edges: list):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ó‡∏µ‡πà‡∏°‡∏µ nested fork - dynamic detection"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° start node
        self.location_builder.add_location(
            template=template,
            location_id=start_node.node_id,
            node_name=start_node.name,
            node_type=start_node.node_type
        )
        
        # ‡∏ï‡∏≤‡∏° path ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á nested fork ‡πÅ‡∏•‡∏∞ join nodes
        self._follow_template_path_to_joins(template, start_node.node_id, template_edges, is_nested=True)
    
    def _add_simple_template_path(self, template: Template, start_node, template_edges: list):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ - dynamic detection"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° start node
        self.location_builder.add_location(
            template=template,
            location_id=start_node.node_id,
            node_name=start_node.name,
            node_type=start_node.node_type
        )
        
        # ‡∏ï‡∏≤‡∏° path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main join
        self._follow_template_path_to_joins(template, start_node.node_id, template_edges, is_nested=False)
    
    def _follow_template_path_to_joins(self, template: Template, start_node_id: str, template_edges: list, is_nested: bool):
        """‡∏ï‡∏≤‡∏° path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á join nodes - dynamic detection"""
        current = start_node_id
        visited = set()
        
        while current and current not in visited:
            visited.add(current)
            
            # ‡∏´‡∏≤ edge ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_edge = None
            for edge in self.context.edges:
                if edge.source_id == current:
                    next_edge = edge
                    template_edges.append(edge)
                    break
            
            if not next_edge:
                break
                
            current = next_edge.target_id
            next_node = self.context.nodes.get(current)
            
            if next_node:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° location
                self.location_builder.add_location(
                    template=template,
                    location_id=next_node.node_id,
                    node_name=next_node.name,
                    node_type=next_node.node_type
                )
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î - dynamic
                if self._should_stop_at_node(next_node, is_nested):
                    if is_nested and next_node.node_type in ("uml:ForkNode", "ForkNode"):
                        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested template - ‡πÄ‡∏û‡∏¥‡πà‡∏° join structure
                        self._add_template_complete_join_structure(template)
                    break
    
    def _should_stop_at_node(self, node, is_nested: bool) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà node ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - dynamic detection"""
        if is_nested:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested template - ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà nested fork
            return (node.node_type in ("uml:ForkNode", "ForkNode") and 
                    not self._is_main_level_fork(node.name))
        else:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö simple template - ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà main join
            return (node.node_type in ("uml:JoinNode", "JoinNode") and 
                    self._is_main_level_join(node.name))
    
    def _is_main_level_join(self, join_name: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô main level join ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - dynamic detection"""
        underscore_count = join_name.count('_')
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö join nodes ‡∏≠‡∏∑‡πà‡∏ô
        all_join_underscores = []
        for node_id, node in self.context.nodes.items():
            if node.node_type in ("uml:JoinNode", "JoinNode"):
                all_join_underscores.append(node.name.count('_'))
        
        if all_join_underscores:
            min_underscores = min(all_join_underscores)
            return underscore_count == min_underscores
        
        return True
    
    def _build_all_transitions(self, all_templates: List[Template]):
        """Build transitions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å templates"""
        for template in all_templates:
            self._build_transitions_for_template_fixed(template)
    
    def _build_transitions_for_template_fixed(self, template: Template):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP - Single Responsibility + Strategy Pattern"""
        template_node_ids = set(template.locations.keys())
        
        # ‡πÉ‡∏ä‡πâ Strategy Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö different template types
        if template.name == "Template":
            self._build_main_template_transitions(template, template_node_ids)
        elif template.name.startswith("Template") and template.name != "Template":
            self._build_fork_template_transitions(template, template_node_ids)
    
    def _build_main_template_transitions(self, template: Template, template_node_ids: set):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main template ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á main path nodes
        main_path_sequence = self._build_main_path_sequence(list(self.context.nodes.values()))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡∏ï‡∏≤‡∏° sequence (InitialNode -> Process1 -> ForkNode1 -> JoinNode1 -> ActivityFinalNode)
        for i in range(len(main_path_sequence) - 1):
            source_id = main_path_sequence[i]
            target_id = main_path_sequence[i + 1]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á fake edge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main path
            from domain.models import EdgeInfo
            edge = EdgeInfo(source_id, target_id)
            
            source_node = self.context.nodes.get(source_id)
            target_node = self.context.nodes.get(target_id)
            
            if source_node and target_node:
                self.transition_builder.add_transition(
                    template=template,
                    edge=edge,
                    source_node=source_node,
                    target_node=target_node,
                    context=self.context,
                    from_fork_template=False
                )
    
    def _build_fork_template_transitions(self, template: Template, template_node_ids: set):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fork templates ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° initial location ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fork templates
        template_node_ids.add(f"fork_{template.name}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á initial transition ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fork template
        first_node_id = self._get_first_real_node_in_template(template)
        
        if first_node_id:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á initial transition
            from domain.models import EdgeInfo
            initial_edge = EdgeInfo(f"fork_{template.name}", first_node_id)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á fake initial node
            initial_node = type('Node', (), {
                'node_id': f"fork_{template.name}",
                'name': f"InitialNode_{template.name}",
                'node_type': "InitialNode"
            })()
            
            target_node = self.context.nodes.get(first_node_id)
            if target_node:
                self.transition_builder.add_transition(
                    template=template,
                    edge=initial_edge,
                    source_node=initial_node,
                    target_node=target_node,
                    context=self.context,
                    from_fork_template=True
                )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏° template type ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Strategy Pattern
        if template.name == "Template1":
            self._build_template1_specific_transitions(template)
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡∏à‡∏≤‡∏Å edges ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô template (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö templates ‡∏≠‡∏∑‡πà‡∏ô)
            if hasattr(template, '_template_edges'):
                for edge in template._template_edges:
                    source_node = self.context.nodes.get(edge.source_id)
                    target_node = self.context.nodes.get(edge.target_id)
                    
                    if source_node and target_node:
                        self.transition_builder.add_transition(
                            template=template,
                            edge=edge,
                            source_node=source_node,
                            target_node=target_node,
                            context=self.context,
                            from_fork_template=True
                        )
    
    def _build_template1_specific_transitions(self, template: Template):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á transitions ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Template1 ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Strategy Pattern - Dynamic Detection"""
        from domain.models import EdgeInfo
        
        # 1. Process2 -> ForkNode1_1 (from existing edges)
        process2_node = None
        fork1_1_node = None
        
        for location_id in template.locations.keys():
            node = self.context.nodes.get(location_id)
            if node:
                if "Process2" in node.name:
                    process2_node = node
                elif node.node_type in ("uml:ForkNode", "ForkNode") and "1_1" in node.name:
                    fork1_1_node = node
        
        if process2_node and fork1_1_node:
            # ‡∏´‡∏≤ edge ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Process2 -> ForkNode1_1
            for edge in self.context.edges:
                if edge.source_id == process2_node.node_id and edge.target_id == fork1_1_node.node_id:
                    self.transition_builder.add_transition(
                        template=template,
                        edge=edge,
                        source_node=process2_node,
                        target_node=fork1_1_node,
                        context=self.context,
                        from_fork_template=True
                    )
                    break
        
        # 2. ForkNode1_1 -> Template Join Node (dynamic detection)
        if fork1_1_node:
            join_node_id = f"JoinNode_{template.name}_Join_Join"
            join_node = type('Node', (), {
                'node_id': join_node_id,
                'name': join_node_id,
                'node_type': "JoinNode"
            })()
            
            fake_edge = EdgeInfo(fork1_1_node.node_id, join_node_id)
            self.transition_builder.add_transition(
                template=template,
                edge=fake_edge,
                source_node=fork1_1_node,
                target_node=join_node,
                context=self.context,
                from_fork_template=True
            )
        
        # 3. Template Join -> Final Join (dynamic detection)
        template_join_id = f"JoinNode_{template.name}_Join_Join"
        final_join_id = self._detect_final_join_node_from_context()
        
        join_template_node = type('Node', (), {
            'node_id': template_join_id,
            'name': template_join_id,
            'node_type': "JoinNode"
        })()
        
        final_join_node = type('Node', (), {
            'node_id': final_join_id,
            'name': final_join_id,
            'node_type': "JoinNode"
        })()
        
        final_edge = EdgeInfo(template_join_id, final_join_id)
        self.transition_builder.add_transition(
            template=template,
            edge=final_edge,
            source_node=join_template_node,
            target_node=final_join_node,
            context=self.context,
            from_fork_template=True
        )
    
    def _get_first_real_node_in_template(self, template: Template) -> str:
        """‡∏´‡∏≤ node ‡πÅ‡∏£‡∏Å‡πÉ‡∏ô template (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° initial node) ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP"""
        for location_id in template.locations.keys():
            if not location_id.startswith("fork_"):
                return location_id
        return None
    
    def get_conversion_stats(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö Complete OOP Fixed"""
        return {
            "architecture": "Complete OOP with Full Infrastructure Components - Fixed",
            "design_patterns": [
                "Dependency Injection",
                "Strategy Pattern (NodeProcessorFactory)",
                "Builder Pattern (LocationBuilder, TransitionBuilder)",
                "Factory Pattern (NodeProcessorFactory)",
                "Repository Pattern (TemplateManager, DeclarationManager)"
            ],
            "infrastructure_components": [
                "ActivityDiagramParser",
                "NodeProcessorFactory",
                "LocationBuilder", 
                "TransitionBuilder",
                "TemplateManager", 
                "DeclarationManager",
                "XMLGenerator"
            ],
            "templates": len(self.context.templates) if hasattr(self.context, 'templates') else 0,
            "declarations": len(self.declaration_manager.get_declarations()),
            "nodes_processed": len(self.context.nodes),
            "edges_processed": len(self.context.edges),
            "clean_architecture": True,
            "solid_principles": True,
            "fixed_version": True
        } 

    def _extract_meaningful_name_from_id(self, node_id: str) -> str:
        """‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å node_id ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Strategy Pattern"""
        # ‡∏ñ‡πâ‡∏≤ node_id ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if any(keyword in node_id for keyword in ["JoinNode", "Join", "Template"]):
            return node_id
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ID ‡πÅ‡∏õ‡∏•‡∏Å‡πÜ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ default ‡∏à‡∏≤‡∏Å context
        return self._generate_default_meaningful_name()
    
    def _generate_default_meaningful_name(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ default ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å context ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Factory Pattern - Complete Dynamic"""
        # Strategy 1: ‡∏´‡∏≤ pattern ‡∏à‡∏≤‡∏Å existing join nodes
        existing_join_patterns = set()
        for node_id, node in self.context.nodes.items():
            if node.node_type in ("uml:JoinNode", "JoinNode"):
                name_part = node.name.split(',')[0].strip()
                if "JoinNode" in name_part:
                    existing_join_patterns.add(name_part)
        
        # Strategy 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å main fork pattern
        for node_id, node in self.context.nodes.items():
            if (node.node_type in ("uml:ForkNode", "ForkNode") and 
                "1_1" not in node.name):  # main fork
                fork_name = node.name.split(',')[0].strip()
                # ‡πÅ‡∏õ‡∏•‡∏á ForkNode -> JoinNode (dynamic pattern transformation)
                if "Fork" in fork_name:
                    candidate = fork_name.replace("Fork", "Join") + "_Join"
                else:
                    candidate = f"Join_{fork_name}_Join"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if candidate not in existing_join_patterns:
                    return candidate
        
        # Strategy 3: Generate unique name ‡∏à‡∏≤‡∏Å count
        base_name = "JoinNode"
        counter = len(existing_join_patterns) + 1
        return f"{base_name}{counter}_Join" 

    def _add_template_complete_join_structure(self, template: Template):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° complete join structure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Factory Pattern - Dynamic Detection"""
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á join node ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° nested templates (dynamic naming)
        join_nested_id = f"JoinNode_{template.name}_Join_Join"
        self.location_builder.add_location(
            template=template,
            location_id=join_nested_id,
            node_name=join_nested_id,
            node_type="JoinNode"
        )
        
        # 2. ‡∏´‡∏≤ final join node ‡∏à‡∏≤‡∏Å context (dynamic detection)
        final_join_node_id = self._detect_final_join_node_from_context()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á final join node ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (dynamic creation)
        if final_join_node_id not in self.context.nodes:
            # Dynamic name generation ‡πÅ‡∏ó‡∏ô hardcode
            dynamic_name = self._extract_meaningful_name_from_id(final_join_node_id)
            final_join_node = type('Node', (), {
                'node_id': final_join_node_id,
                'name': dynamic_name,  # ‡πÉ‡∏ä‡πâ dynamic name
                'node_type': 'uml:JoinNode',
                'x_pos': '1003',
                'y_pos': '246'
            })()
            self.context.nodes[final_join_node_id] = final_join_node
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° final join location
        self.location_builder.add_location(
            template=template,
            location_id=final_join_node_id,
            node_name=self._extract_meaningful_name_from_id(final_join_node_id),  # ‡πÉ‡∏ä‡πâ dynamic name
            node_type="JoinNode"
        )
    
    def _detect_final_join_node_from_context(self) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ final join node ‡∏à‡∏≤‡∏Å context ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å Repository Pattern - Template2 Style"""
        # Strategy 1: ‡∏´‡∏≤ main join node ‡∏à‡∏≤‡∏Å original XML (‡πÅ‡∏ö‡∏ö Template2)
        for node_id, node in self.context.nodes.items():
            if (node.node_type in ("uml:JoinNode", "JoinNode") and 
                self._is_main_level_join(node.name) and
                "Template" not in node.name):  # main join node ‡πÅ‡∏ö‡∏ö Template2
                return self._normalize_main_join_name(node.name)
        
        # Strategy 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ main join pattern (‡πÅ‡∏ö‡∏ö Template2)
        return "JoinNode1_Join"
    
    def _normalize_main_join_name(self, original_name: str) -> str:
        """Normalize main join name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Template2 style"""
        clean_name = original_name.split(',')[0].strip()
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô main level join ‡πÉ‡∏´‡πâ return standardized name
        if self._is_main_level_join(clean_name):
            return "JoinNode1_Join"
        
        # ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
        return clean_name if "Join" in clean_name else f"{clean_name}_Join"
    
    def _add_nested_template_path(self, template: Template, start_node_id: str, template_name: str):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested templates ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å OOP - Dynamic Detection"""
        template_edges = []
        
        # ‡πÉ‡∏ä‡πâ Strategy Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö different template paths - dynamic detection
        template_path_type = self._detect_nested_template_path_type(start_node_id)
        
        if template_path_type == "decision_path":
            self._build_decision_template_path(template, start_node_id, template_edges)
        elif template_path_type == "simple_path":
            self._build_simple_template_path(template, start_node_id, template_edges)
        
        # ‡πÄ‡∏Å‡πá‡∏ö edges ‡∏ï‡∏≤‡∏° Repository Pattern
        if not hasattr(template, '_template_edges'):
            template._template_edges = []
        template._template_edges.extend(template_edges)
    
    def _detect_nested_template_path_type(self, start_node_id: str) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path type ‡∏Ç‡∏≠‡∏á nested template - dynamic detection"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ path ‡∏ô‡∏µ‡πâ‡∏°‡∏µ decision node ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        visited = set()
        to_visit = [start_node_id]
        
        while to_visit:
            current = to_visit.pop(0)
            if current in visited:
                continue
            visited.add(current)
            
            current_node = self.context.nodes.get(current)
            if current_node and current_node.node_type in ("uml:DecisionNode", "DecisionNode"):
                return "decision_path"
            
            # ‡∏´‡∏≤ next nodes (‡πÅ‡∏Ñ‡πà 2-3 hops)
            if len(visited) < 3:
                for edge in self.context.edges:
                    if edge.source_id == current:
                        to_visit.append(edge.target_id)
        
        return "simple_path"
    
    def _build_decision_template_path(self, template: Template, start_node_id: str, template_edges: list):
        """Build path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ó‡∏µ‡πà‡∏°‡∏µ decision - dynamic detection"""
        visited = set()
        current = start_node_id
        
        while current and current not in visited:
            visited.add(current)
            node = self.context.nodes.get(current)
            if not node:
                break
                
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° location ‡∏î‡πâ‡∏ß‡∏¢ LocationBuilder (OOP component)
            self.location_builder.add_location(
                template=template,
                location_id=node.node_id,
                node_name=node.name,
                node_type=node.node_type
            )
            
            # ‡∏´‡∏≤ outgoing edges ‡∏à‡∏≤‡∏Å current node
            outgoing_edges = [e for e in self.context.edges if e.source_id == current]
            
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Decision node - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á paths
            if node.node_type in ("uml:DecisionNode", "DecisionNode"):
                for edge in outgoing_edges:
                    template_edges.append(edge)
                    target_node = self.context.nodes.get(edge.target_id)
                    if target_node:
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏° target node
                        self.location_builder.add_location(
                            template=template,
                            location_id=target_node.node_id,
                            node_name=target_node.name,
                            node_type=target_node.node_type
                        )
                        
                        # ‡∏ï‡∏≤‡∏° path ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á join
                        self._follow_path_to_final_join(template, target_node.node_id, template_edges)
                break
            
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nodes ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - follow normal path
            if outgoing_edges:
                next_edge = outgoing_edges[0]
                template_edges.append(next_edge)
                current = next_edge.target_id
                
                next_node = self.context.nodes.get(current)
                if next_node and self._is_nested_join_node(next_node):
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° join node ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î
                    self.location_builder.add_location(
                        template=template,
                        location_id=next_node.node_id,
                        node_name=next_node.name,
                        node_type=next_node.node_type
                    )
                    break
            else:
                break
    
    def _build_simple_template_path(self, template: Template, start_node_id: str, template_edges: list):
        """Build path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ - dynamic detection"""
        visited = set()
        current = start_node_id
        
        while current and current not in visited:
            visited.add(current)
            node = self.context.nodes.get(current)
            if not node:
                break
                
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° location ‡∏î‡πâ‡∏ß‡∏¢ LocationBuilder (OOP component)
            self.location_builder.add_location(
                template=template,
                location_id=node.node_id,
                node_name=node.name,
                node_type=node.node_type
            )
            
            # ‡∏´‡∏≤ edge ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_edge = None
            for edge in self.context.edges:
                if edge.source_id == current:
                    next_edge = edge
                    template_edges.append(edge)
                    break
            
            if not next_edge:
                break
                
            current = next_edge.target_id
            next_node = self.context.nodes.get(current)
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà nested join
            if next_node and self._is_nested_join_node(next_node):
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° join node
                self.location_builder.add_location(
                    template=template,
                    location_id=next_node.node_id,
                    node_name=next_node.name,
                    node_type=next_node.node_type
                )
                break
    
    def _is_nested_join_node(self, node) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô nested join node ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - dynamic detection"""
        return (node.node_type in ("uml:JoinNode", "JoinNode") and 
                not self._is_main_level_join(node.name))
    
    def _follow_path_to_final_join(self, template: Template, start_node_id: str, template_edges: list):
        """‡∏ï‡∏≤‡∏° path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á final join - dynamic detection"""
        current = start_node_id
        visited = set()
        
        while current and current not in visited:
            visited.add(current)
            
            # ‡∏´‡∏≤ edge ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_edge = None
            for edge in self.context.edges:
                if edge.source_id == current:
                    next_edge = edge
                    template_edges.append(edge)
                    break
            
            if not next_edge:
                break
                
            current = next_edge.target_id
            next_node = self.context.nodes.get(current)
            
            if next_node:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° location
                self.location_builder.add_location(
                    template=template,
                    location_id=next_node.node_id,
                    node_name=next_node.name,
                    node_type=next_node.node_type
                )
                
                # ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà nested join
                if self._is_nested_join_node(next_node):
                    break 